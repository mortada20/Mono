import string
from collections import Counter

# English letter frequency (most to least common)
english_freq_order = 'ETAOINSHRDLCUMWFGYPBVKJXQZ'

def decrypt_monoalphabetic(ciphertext):
    ciphertext = ciphertext.upper()
    letters_only = [c for c in ciphertext if c in string.ascii_uppercase]
    
    # Count letter frequencies in the ciphertext
    freq = Counter(letters_only)
    most_common = [item[0] for item in freq.most_common()]
    
    # Map cipher letters to guessed plaintext letters
    mapping = {}
    for i, letter in enumerate(most_common):
        if i < len(english_freq_order):
            mapping[letter] = english_freq_order[i]
    
    # Decrypt the text using the frequency-based mapping
    decrypted = ''
    for char in ciphertext:
        if char in mapping:
            decrypted += mapping[char]
        else:
            decrypted += char  # keep punctuation, spaces, etc.

    # Print the tentative mapping and result
    print("Substitution Mapping (based on frequency):")
    for c, p in mapping.items():
        print(f"{c} -> {p}")
    
    print("\nDecrypted text (approximate):")
    print(decrypted)

# Example usage
ciphertext = input("Enter monoalphabetic cipher text: ")
decrypt_monoalphabetic(ciphertext)
